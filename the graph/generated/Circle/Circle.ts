// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DiscountsFundFilled extends ethereum.Event {
  get params(): DiscountsFundFilled__Params {
    return new DiscountsFundFilled__Params(this);
  }
}

export class DiscountsFundFilled__Params {
  _event: DiscountsFundFilled;

  constructor(event: DiscountsFundFilled) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ImTiredSoICheated extends ethereum.Event {
  get params(): ImTiredSoICheated__Params {
    return new ImTiredSoICheated__Params(this);
  }
}

export class ImTiredSoICheated__Params {
  _event: ImTiredSoICheated;

  constructor(event: ImTiredSoICheated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OfferSet extends ethereum.Event {
  get params(): OfferSet__Params {
    return new OfferSet__Params(this);
  }
}

export class OfferSet__Params {
  _event: OfferSet;

  constructor(event: OfferSet) {
    this._event = event;
  }

  get minPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isFixed(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class RefundFundIncreased extends ethereum.Event {
  get params(): RefundFundIncreased__Params {
    return new RefundFundIncreased__Params(this);
  }
}

export class RefundFundIncreased__Params {
  _event: RefundFundIncreased;

  constructor(event: RefundFundIncreased) {
    this._event = event;
  }

  get client(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SellerDiscountsFundFilled extends ethereum.Event {
  get params(): SellerDiscountsFundFilled__Params {
    return new SellerDiscountsFundFilled__Params(this);
  }
}

export class SellerDiscountsFundFilled__Params {
  _event: SellerDiscountsFundFilled;

  constructor(event: SellerDiscountsFundFilled) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UsedRefund extends ethereum.Event {
  get params(): UsedRefund__Params {
    return new UsedRefund__Params(this);
  }
}

export class UsedRefund__Params {
  _event: UsedRefund;

  constructor(event: UsedRefund) {
    this._event = event;
  }

  get client(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reduction(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UserWhiteListed extends ethereum.Event {
  get params(): UserWhiteListed__Params {
    return new UserWhiteListed__Params(this);
  }
}

export class UserWhiteListed__Params {
  _event: UserWhiteListed;

  constructor(event: UserWhiteListed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Circle__getOfferResultValue0Struct extends ethereum.Tuple {
  get minPrice(): BigInt {
    return this[0].toBigInt();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get isFixed(): boolean {
    return this[2].toBoolean();
  }
}

export class Circle extends ethereum.SmartContract {
  static bind(address: Address): Circle {
    return new Circle("Circle", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimableRefund(client: Address): BigInt {
    let result = super.call(
      "claimableRefund",
      "claimableRefund(address):(uint256)",
      [ethereum.Value.fromAddress(client)]
    );

    return result[0].toBigInt();
  }

  try_claimableRefund(client: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableRefund",
      "claimableRefund(address):(uint256)",
      [ethereum.Value.fromAddress(client)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  discountsFund(): BigInt {
    let result = super.call("discountsFund", "discountsFund():(uint256)", []);

    return result[0].toBigInt();
  }

  try_discountsFund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "discountsFund",
      "discountsFund():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOffer(): Circle__getOfferResultValue0Struct {
    let result = super.call(
      "getOffer",
      "getOffer():((uint256,uint256,bool))",
      []
    );

    return changetype<Circle__getOfferResultValue0Struct>(result[0].toTuple());
  }

  try_getOffer(): ethereum.CallResult<Circle__getOfferResultValue0Struct> {
    let result = super.tryCall(
      "getOffer",
      "getOffer():((uint256,uint256,bool))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Circle__getOfferResultValue0Struct>(value[0].toTuple())
    );
  }

  getSellerDiscountFund(seller: Address): BigInt {
    let result = super.call(
      "getSellerDiscountFund",
      "getSellerDiscountFund(address):(uint256)",
      [ethereum.Value.fromAddress(seller)]
    );

    return result[0].toBigInt();
  }

  try_getSellerDiscountFund(seller: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellerDiscountFund",
      "getSellerDiscountFund(address):(uint256)",
      [ethereum.Value.fromAddress(seller)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAdmin(user: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelisted(user: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get reserve(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _discountFundCharge(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class SetDiscountFundChargeCall extends ethereum.Call {
  get inputs(): SetDiscountFundChargeCall__Inputs {
    return new SetDiscountFundChargeCall__Inputs(this);
  }

  get outputs(): SetDiscountFundChargeCall__Outputs {
    return new SetDiscountFundChargeCall__Outputs(this);
  }
}

export class SetDiscountFundChargeCall__Inputs {
  _call: SetDiscountFundChargeCall;

  constructor(call: SetDiscountFundChargeCall) {
    this._call = call;
  }

  get charge(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDiscountFundChargeCall__Outputs {
  _call: SetDiscountFundChargeCall;

  constructor(call: SetDiscountFundChargeCall) {
    this._call = call;
  }
}

export class SetLastBalanceCall extends ethereum.Call {
  get inputs(): SetLastBalanceCall__Inputs {
    return new SetLastBalanceCall__Inputs(this);
  }

  get outputs(): SetLastBalanceCall__Outputs {
    return new SetLastBalanceCall__Outputs(this);
  }
}

export class SetLastBalanceCall__Inputs {
  _call: SetLastBalanceCall;

  constructor(call: SetLastBalanceCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLastBalanceCall__Outputs {
  _call: SetLastBalanceCall;

  constructor(call: SetLastBalanceCall) {
    this._call = call;
  }
}

export class SetSellerOfferCall extends ethereum.Call {
  get inputs(): SetSellerOfferCall__Inputs {
    return new SetSellerOfferCall__Inputs(this);
  }

  get outputs(): SetSellerOfferCall__Outputs {
    return new SetSellerOfferCall__Outputs(this);
  }
}

export class SetSellerOfferCall__Inputs {
  _call: SetSellerOfferCall;

  constructor(call: SetSellerOfferCall) {
    this._call = call;
  }

  get offer(): SetSellerOfferCallOfferStruct {
    return changetype<SetSellerOfferCallOfferStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetSellerOfferCall__Outputs {
  _call: SetSellerOfferCall;

  constructor(call: SetSellerOfferCall) {
    this._call = call;
  }
}

export class SetSellerOfferCallOfferStruct extends ethereum.Tuple {
  get minPrice(): BigInt {
    return this[0].toBigInt();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get isFixed(): boolean {
    return this[2].toBoolean();
  }
}

export class SupplyDiscountsFundCall extends ethereum.Call {
  get inputs(): SupplyDiscountsFundCall__Inputs {
    return new SupplyDiscountsFundCall__Inputs(this);
  }

  get outputs(): SupplyDiscountsFundCall__Outputs {
    return new SupplyDiscountsFundCall__Outputs(this);
  }
}

export class SupplyDiscountsFundCall__Inputs {
  _call: SupplyDiscountsFundCall;

  constructor(call: SupplyDiscountsFundCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplyDiscountsFundCall__Outputs {
  _call: SupplyDiscountsFundCall;

  constructor(call: SupplyDiscountsFundCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferWithReductionCall extends ethereum.Call {
  get inputs(): TransferWithReductionCall__Inputs {
    return new TransferWithReductionCall__Inputs(this);
  }

  get outputs(): TransferWithReductionCall__Outputs {
    return new TransferWithReductionCall__Outputs(this);
  }
}

export class TransferWithReductionCall__Inputs {
  _call: TransferWithReductionCall;

  constructor(call: TransferWithReductionCall) {
    this._call = call;
  }

  get seller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get reduction(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferWithReductionCall__Outputs {
  _call: TransferWithReductionCall;

  constructor(call: TransferWithReductionCall) {
    this._call = call;
  }
}

export class WhitelistUserCall extends ethereum.Call {
  get inputs(): WhitelistUserCall__Inputs {
    return new WhitelistUserCall__Inputs(this);
  }

  get outputs(): WhitelistUserCall__Outputs {
    return new WhitelistUserCall__Outputs(this);
  }
}

export class WhitelistUserCall__Inputs {
  _call: WhitelistUserCall;

  constructor(call: WhitelistUserCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WhitelistUserCall__Outputs {
  _call: WhitelistUserCall;

  constructor(call: WhitelistUserCall) {
    this._call = call;
  }
}
